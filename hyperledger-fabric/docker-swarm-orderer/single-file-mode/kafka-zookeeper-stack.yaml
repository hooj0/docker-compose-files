version: '3.6'

#-----------------------------------------------------------------------------------
# base config yaml
#-----------------------------------------------------------------------------------
x-hosts: &hosts
  - "dev-010:192.168.33.71"
  - "dev-020:192.168.33.72"
  - "dev-030:192.168.33.73"
  - "dev-040:192.168.33.74"
  
#-----------------------------------------------------------------------------------
# base service yaml
#-----------------------------------------------------------------------------------
x-base-services:
  zookeeper: &zookeeper-base
    image: hyperledger/fabric-zookeeper${IMAGE_TAG_FABRIC_ZOOKEEPER}
    expose:
      - 2181
      - 2888
      - 3888
    ports:
      - target: 2181
        published: 2181
        protocol: tcp
        mode: host
      - target: 2888
        published: 2888
        protocol: tcp
        mode: host
      - target: 3888
        published: 3888
        protocol: tcp
        mode: host
    deploy: &zookeeper-deploy-common
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
    extra_hosts: *hosts

  kafka: &kafka-base
    image: hyperledger/fabric-kafka${IMAGE_TAG_FABRIC_KAFKA}
    environment: &kafka-env-common
      KAFKA_MESSAGE_MAX_BYTES: 103809024 # 99 * 1024 * 1024 B
      KAFKA_REPLICA_FETCH_MAX_BYTES: 103809024 # 99 * 1024 * 1024 B
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_MS: -1
      KAFKA_ZOOKEEPER_CONNECT: dev-010:2181,dev-020:2181,dev-040:2181
      #KAFKA_ZOOKEEPER_CONNECT: zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
      
      #zookeeper.connection.timeout.ms
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 30000
      #zookeeper.session.timeout.ms
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 30000
    expose:
      - 9092
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
    extra_hosts: *hosts


#-----------------------------------------------------------------------------------
# kafka & zookeeper networks yaml
#-----------------------------------------------------------------------------------
networks:
  net:
    attachable: true
    driver: overlay
    
#-----------------------------------------------------------------------------------
# kafka & zookeeper service yaml
#-----------------------------------------------------------------------------------
services:
  zookeeper0:
    hostname: zookeeper0.example.com
    <<: *zookeeper-base
    deploy:
      <<: *zookeeper-deploy-common
      placement:
        constraints:
          - node.hostname == dev-010
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=dev-020:2888:3888 server.3=dev-040:2888:3888
      #ZOO_SERVERS: server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    networks:
      net:
        aliases:
        - zookeeper0.example.com

  zookeeper1:
    hostname: zookeeper1.example.com
    <<: *zookeeper-base
    deploy:
      <<: *zookeeper-deploy-common
      placement:
        constraints:
          - node.hostname == dev-020
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=dev-010:2888:3888 server.2=0.0.0.0:2888:3888 server.3=dev-040:2888:3888
      #ZOO_SERVERS: server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    networks:
      net:
        aliases:
        - zookeeper1.example.com

  zookeeper2:
    hostname: zookeeper2.example.com
    <<: *zookeeper-base
    deploy:
      <<: *zookeeper-deploy-common
      placement:
        constraints:
          - node.hostname == dev-040
    environment:
      ZOO_MY_ID: 3  
      ZOO_SERVERS: server.1=dev-010:2888:3888 server.2=dev-020:2888:3888 server.3=0.0.0.0:2888:3888
      #ZOO_SERVERS: server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    networks:
      net:
        aliases:
        - zookeeper2.example.com

  kafka0:
    hostname: kafka0.example.com
    <<: *kafka-base
    environment:
      <<: *kafka-env-common
      KAFKA_BROKER_ID: 0
    networks:
      net:
        aliases:
        - kafka0.example.com
  
  kafka1:
    hostname: kafka1.example.com
    <<: *kafka-base
    environment:
      <<: *kafka-env-common
      KAFKA_BROKER_ID: 1
    networks:
      net:
        aliases:
        - kafka1.example.com
 
  kafka2:
    hostname: kafka2.example.com
    <<: *kafka-base
    environment:
      <<: *kafka-env-common
      KAFKA_BROKER_ID: 2
    networks:
      net:
        aliases:
        - kafka2.example.com
 
  kafka3:
    hostname: kafka3.example.com
    <<: *kafka-base
    environment:
      <<: *kafka-env-common
      KAFKA_BROKER_ID: 3
    networks:
      net:
        aliases:
        - kafka3.example.com
      
  orderer:
    command: orderer
    hostname: orderer.example.com
    deploy:
      placement:
        constraints:
        - node.role == manager
      restart_policy:
        condition: on-failure
    environment:
      GRPC_TRACE: all=true,
      GRPC_VERBOSITY: debug
      ORDERER_GENERAL_AUTHENTICATION_TIMEWINDOW: 3600s
      ORDERER_GENERAL_GENESISFILE: /etc/hyperledger/configtx/genesis.block
      ORDERER_GENERAL_GENESISMETHOD: file
      ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
      ORDERER_GENERAL_LOCALMSPDIR: /etc/hyperledger/msp/orderer/msp
      ORDERER_GENERAL_LOCALMSPID: OrdererMSP
      ORDERER_GENERAL_LOGLEVEL: debug
      ORDERER_GENERAL_TLS_CERTIFICATE: /etc/hyperledger/msp/orderer/tls/server.crt
      ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED: "false"
      ORDERER_GENERAL_TLS_CLIENTROOTCAS: '[/etc/hyperledger/msp/peerOrg1/msp/tlscacerts/tlsca.org1.foo.com-cert.pem,/etc/hyperledger/msp/peerOrg2/msp/tlscacerts/tlsca.org2.bar.com-cert.pem]'
      ORDERER_GENERAL_TLS_ENABLED: "false"
      ORDERER_GENERAL_TLS_PRIVATEKEY: /etc/hyperledger/msp/orderer/tls/server.key
      ORDERER_GENERAL_TLS_ROOTCAS: '[/etc/hyperledger/msp/orderer/tls/ca.crt]'
      
      ORDERER_KAFKA_RETRY_SHORTINTERVAL: 1s
      ORDERER_KAFKA_RETRY_SHORTTOTAL: 30s
      ORDERER_KAFKA_VERBOSE: "true"
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: fabric_net
      #ORDERER_KAFKA_BROKERS: '[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]'
    image: hyperledger/fabric-orderer:x86_64-1.1.0
    ports:
    - published: 7050
      target: 7050
    volumes:
    - ./fabric-configs/v1.1/channel-artifacts:/etc/hyperledger/configtx:ro
    - ./fabric-configs/v1.1/crypto-config/ordererOrganizations/simple.com/orderers/orderer.simple.com:/etc/hyperledger/msp/orderer:ro
    - ./fabric-configs/v1.1/crypto-config/peerOrganizations/org1.foo.com/peers/peer0.org1.foo.com:/etc/hyperledger/msp/peerOrg1:ro
    - ./fabric-configs/v1.1/crypto-config/peerOrganizations/org2.bar.com/peers/peer0.org2.bar.com:/etc/hyperledger/msp/peerOrg2:ro
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    networks:
      net:
        aliases:
        - orderer.example.com
  
  cli:
    image: busybox:latest
    container_name: cli.example.com
    hostname: cli.example.com
    tty: true
    stdin_open: true
    deploy:
      placement:
        constraints:
        - node.role == manager
      restart_policy:
        condition: on-failure
    networks:
      net:
        aliases:
        - cli.example.com